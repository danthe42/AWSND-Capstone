org: danthe42
app: serverless-review-app
service: serverless-review-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: false

provider:
  name: aws
  runtime: nodejs16.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  tracing:
    lambda: true
    apiGateway: true
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'xray:PutTraceSegments'
            - 'xray:PutTelemetryRecords'
          Resource:
            - '*' 
        - Effect: Allow
          Action:
            - 'logs:PutLogEvents'
            - 'logs:CreateLogStream'
            - 'logs:CreateLogGroup'
          Resource:
          - '*'

  environment:          
    PRODUCT_TABLE: Product-${self:provider.stage}
    REVIEW_TABLE: Review-${self:provider.stage}
    REVIEWS_CREATED_AT_INDEX: ReviewsCreatedAtIndex-${self:provider.stage}

  logs:
    restApi:       
      accessLogging: true
      format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'
      executionLogging: true

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateProduct:
    handler: src/lambda/http/createProduct.handler
    events:
      - http:
          method: post
          path: products
          cors: true
          authorizer: 
            name: Auth
          request:
            schemas:
              application/json: ${file(models/create-product-model.json)}

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt ProductDynamoDBTable.Arn
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*' 

  CreateReview:
    handler: src/lambda/http/createReview.handler
    events:
      - http:
          method: post
          path: products/{ProductId}/review
          cors: true
          authorizer: 
            name: Auth
          request:
            schemas:
              application/json: ${file(models/create-review-model.json)}

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt ReviewDynamoDBTable.Arn
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*' 

  GetProducts:
    handler: src/lambda/http/getProducts.handler
    events:
      - http:
          method: get
          path: products/{ProductID}
          cors: true
          authorizer: 
            name: Auth
      - http:
          method: get
          path: products
          cors: true
          authorizer: 
            name: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: !GetAtt ProductDynamoDBTable.Arn

  GetReviews:
    handler: src/lambda/http/getReviews.handler
    events:
      - http:
          method: get
          path: products/{ProductID}/review
          cors: true
          authorizer: 
            name: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt ReviewDynamoDBTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}/index/${self:provider.environment.REVIEWS_CREATED_AT_INDEX}
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*' 

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    
    ProductDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ProductID
            AttributeType: S
        KeySchema:
          - AttributeName: ProductID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PRODUCT_TABLE}

    ReviewDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ProductID
            AttributeType: S
          - AttributeName: ReviewID
            AttributeType: S
          - AttributeName: CreatedAt
            AttributeType: S
        KeySchema:
          - AttributeName: ProductID
            KeyType: HASH
          - AttributeName: ReviewID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REVIEW_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.REVIEWS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: ProductID
                KeyType: HASH
              - AttributeName: CreatedAt
                KeyType: RANGE              # to get reviews in order for a given product 
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index 

custom:
  serverless-offline:
    port:3003
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev




